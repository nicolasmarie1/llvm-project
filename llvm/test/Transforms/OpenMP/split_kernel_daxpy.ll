; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 4
; RUN: opt < %s -S -passes="openmp-opt-postlink,ipsccp,simplifycfg" | FileCheck %s

target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

%struct.KernelEnvironmentTy = type { %struct.ConfigurationEnvironmentTy, ptr, ptr }
%struct.ConfigurationEnvironmentTy = type { i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, ptr }

@__omp_offloading_daxpy_kernel_environment = weak_odr protected local_unnamed_addr constant %struct.KernelEnvironmentTy { %struct.ConfigurationEnvironmentTy { i8 0, i8 0, i8 2, i32 1, i32 1024, i32 1, i32 1, i32 0, i32 0, i32 0, ptr null }, ptr null, ptr null }

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: alwaysinline norecurse nounwind
define weak_odr protected void @__omp_offloading_daxpy(ptr noalias noundef %arg, ptr noundef %arg1, i64 noundef %arg2, ptr noundef %arg3) local_unnamed_addr #2 {
entry:
  %i = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #4, !range !16
  %i4 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #5, !range !17
  %i5 = shl nsw i32 %i, 10
  %i6 = or disjoint i32 %i5, 1023
  %i7 = shl nsw i32 %i4, 10
  %i8 = tail call i32 @llvm.smin.i32(i32 %i6, i32 1023), !range !18
  %i9 = icmp slt i32 %i, 1
  br i1 %i9, label %bb, label %bb46

bb:                                               ; preds = %entry
  %i10 = inttoptr i64 %arg2 to ptr
  br label %bb11

bb11:                                             ; preds = %bb41, %bb
  %i12 = phi i32 [ %i8, %bb ], [ %i44, %bb41 ]
  %i13 = phi i32 [ %i5, %bb ], [ %i42, %bb41 ]
  %i14 = zext i32 %i13 to i64
  %i15 = zext i32 %i12 to i64
  %i16 = inttoptr i64 %i14 to ptr
  %i17 = inttoptr i64 %i15 to ptr
  %i18 = tail call noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #6
  %i19 = icmp eq i32 %i18, 0
  %i20 = ptrtoint ptr %i16 to i64
  %i21 = ptrtoint ptr %i17 to i64
  %i22 = trunc i64 %i20 to i32
  %i23 = tail call noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #4
  %i24 = add nsw i32 %i23, %i22
  %i25 = tail call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #5
  %i26 = sext i32 %i24 to i64
  %i27 = icmp ugt i64 %i26, %i21
  br i1 %i27, label %bb41, label %bb28

bb28:                                             ; preds = %bb11
  %i29 = bitcast i64 %arg2 to double
  br label %bb30

bb30:                                             ; preds = %bb30, %bb28
  %i31 = phi i64 [ %i26, %bb28 ], [ %i39, %bb30 ]
  %i32 = phi i32 [ %i24, %bb28 ], [ %i38, %bb30 ]
  call void @__ompx_split() #7
  %i33 = getelementptr inbounds double, ptr %arg3, i64 %i31
  %i34 = load double, ptr %i33, align 8, !tbaa !19
  %i35 = getelementptr inbounds double, ptr %arg1, i64 %i31
  %i36 = load double, ptr %i35, align 8, !tbaa !19
  %i37 = tail call double @llvm.fmuladd.f64(double %i29, double %i34, double %i36)
  store double %i37, ptr %i35, align 8, !tbaa !19
  %i38 = add nsw i32 %i25, %i32
  %i39 = sext i32 %i38 to i64
  %i40 = icmp ugt i64 %i39, %i21
  br i1 %i40, label %bb41, label %bb30

bb41:                                             ; preds = %bb30, %bb11
  tail call void @llvm.nvvm.barrier0() #8
  %i42 = add nsw i32 %i13, %i7
  %i43 = add nsw i32 %i12, %i7
  %i44 = tail call i32 @llvm.smin.i32(i32 %i43, i32 1023)
  %i45 = icmp slt i32 %i42, 1024
  br i1 %i45, label %bb11, label %bb46

bb46:                                             ; preds = %bb41, %entry
  ret void
}

; Function Attrs: convergent
declare void @__ompx_split() local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { alwaysinline norecurse nounwind "frame-pointer"="all" "kernel" "no-trapping-math"="true" "omp_target_num_teams"="1" "omp_target_thread_limit"="1024" "stack-protector-buffer-size"="8" "target-cpu"="sm_86" "target-features"="+ptx81,+sm_86" }
attributes #3 = { convergent "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="sm_86" "target-features"="+ptx81,+sm_86" }
attributes #4 = { nofree nosync willreturn "llvm.assume"="ompx_no_call_asm" }
attributes #5 = { nosync "llvm.assume"="ompx_no_call_asm" }
attributes #6 = { nofree willreturn "llvm.assume"="ompx_no_call_asm" }
attributes #7 = { convergent nounwind }
attributes #8 = { "llvm.assume"="ompx_no_call_asm,ompx_aligned_barrier" }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !1}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9}
!nvvm.annotations = !{!10, !11, !12, !13}
!omp_offload.info = !{!14}
!nvvmir.version = !{!15}

!0 = !{!"clang version 19.0.0git (git@github.com:tgymnich/llvm-project.git 28b6d786631efec5a92d5068355fdc2b98d0178a)"}
!1 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 7, !"openmp", i32 51}
!4 = !{i32 7, !"openmp-device", i32 51}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{i32 1, !"ThinLTO", i32 0}
!8 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!9 = !{i32 2, !"SDK Version", [2 x i32] [i32 12, i32 1]}
!10 = !{ptr @__omp_offloading_daxpy, !"maxclusterrank", i32 1}
!11 = !{ptr @__omp_offloading_daxpy, !"minctasm", i32 1}
!12 = !{ptr @__omp_offloading_daxpy, !"maxntidx", i32 1024}
!13 = !{ptr @__omp_offloading_daxpy, !"kernel", i32 1}
!14 = !{i32 0, i32 64769, i32 2753303, !"daxpy", i32 21, i32 0, i32 0}
!15 = !{i32 2, i32 0}
!16 = !{i32 0, i32 -1}
!17 = !{i32 1, i32 0}
!18 = !{i32 -2147483648, i32 1024}
!19 = !{!20, !20, i64 0}
!20 = !{!"double", !21, i64 0}
!21 = !{!"omnipotent char", !22, i64 0}
!22 = !{!"Simple C/C++ TBAA"}


; CHECK-LABEL: define weak_odr protected void @__omp_offloading_daxpy(
; CHECK-SAME: ptr noalias noundef [[ARG:%.*]], ptr noundef [[ARG1:%.*]], i64 noundef [[ARG2:%.*]], ptr noundef [[ARG3:%.*]]) local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  ContDispatchBB:
; CHECK-NEXT:    [[I25:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #[[ATTR4:[0-9]+]]
; CHECK-NEXT:    [[I23:%.*]] = tail call noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    [[I4:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #[[ATTR4]], !range [[RNG17:![0-9]+]]
; CHECK-NEXT:    [[I:%.*]] = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #[[ATTR5]], !range [[RNG18:![0-9]+]]
; CHECK-NEXT:    [[I5:%.*]] = shl nsw i32 [[I]], 10
; CHECK-NEXT:    [[I6:%.*]] = or disjoint i32 [[I5]], 1023
; CHECK-NEXT:    [[I7:%.*]] = shl nsw i32 [[I4]], 10
; CHECK-NEXT:    [[I8:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I6]], i32 1023), !range [[RNG19:![0-9]+]]
; CHECK-NEXT:    [[I9:%.*]] = icmp slt i32 [[I]], 1
; CHECK-NEXT:    br i1 [[I9]], label [[BB11:%.*]], label [[BB46:%.*]]
; CHECK:       bb11:
; CHECK-NEXT:    [[I719:%.*]] = phi i32 [ [[I7]], [[CONTDISPATCHBB:%.*]] ], [ [[I719]], [[BB41:%.*]] ]
; CHECK-NEXT:    [[I2517:%.*]] = phi i32 [ [[I25]], [[CONTDISPATCHBB]] ], [ [[I2517]], [[BB41]] ]
; CHECK-NEXT:    [[I2314:%.*]] = phi i32 [ [[I23]], [[CONTDISPATCHBB]] ], [ [[I2314]], [[BB41]] ]
; CHECK-NEXT:    [[I47:%.*]] = phi i32 [ [[I4]], [[CONTDISPATCHBB]] ], [ [[I47]], [[BB41]] ]
; CHECK-NEXT:    [[I12:%.*]] = phi i32 [ [[I8]], [[CONTDISPATCHBB]] ], [ [[I44:%.*]], [[BB41]] ]
; CHECK-NEXT:    [[I13:%.*]] = phi i32 [ [[I5]], [[CONTDISPATCHBB]] ], [ [[I42:%.*]], [[BB41]] ]
; CHECK-NEXT:    [[I14:%.*]] = zext i32 [[I13]] to i64
; CHECK-NEXT:    [[I15:%.*]] = zext i32 [[I12]] to i64
; CHECK-NEXT:    [[I16:%.*]] = inttoptr i64 [[I14]] to ptr
; CHECK-NEXT:    [[I17:%.*]] = inttoptr i64 [[I15]] to ptr
; CHECK-NEXT:    [[I20:%.*]] = ptrtoint ptr [[I16]] to i64
; CHECK-NEXT:    [[I21:%.*]] = ptrtoint ptr [[I17]] to i64
; CHECK-NEXT:    [[I22:%.*]] = trunc i64 [[I20]] to i32
; CHECK-NEXT:    [[I24:%.*]] = add nsw i32 [[I2314]], [[I22]]
; CHECK-NEXT:    [[I26:%.*]] = sext i32 [[I24]] to i64
; CHECK-NEXT:    [[I27:%.*]] = icmp ugt i64 [[I26]], [[I21]]
; CHECK-NEXT:    br i1 [[I27]], label [[BB41]], label [[BB28:%.*]]
; CHECK:       bb28:
; CHECK-NEXT:    [[I29:%.*]] = bitcast i64 [[ARG2]] to double
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[ARG]], i32 0, i32 3
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 5
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds ptr, ptr [[TMP3]], i32 0
; CHECK-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 4
; CHECK-NEXT:    [[CACHE_OUT_OFFSET:%.*]] = load i32, ptr [[TMP5]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I47]], ptr [[TMP6]], align 4, !invariant.group [[META20:![0-9]+]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, ptr [[TMP7]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I24]], ptr [[TMP8]], align 4, !invariant.group [[META21:![0-9]+]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32, ptr [[TMP9]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i64, ptr [[TMP10]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i64 [[I26]], ptr [[TMP11]], align 8, !invariant.group [[META22:![0-9]+]]
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i32, ptr [[TMP12]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i64, ptr [[TMP13]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[TMP14]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I13]], ptr [[TMP15]], align 4, !invariant.group [[META23:![0-9]+]]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i32, ptr [[TMP16]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i64, ptr [[TMP17]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr inbounds i32, ptr [[TMP18]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds i32, ptr [[TMP19]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I12]], ptr [[TMP20]], align 4, !invariant.group [[META24:![0-9]+]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr inbounds i32, ptr [[TMP21]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i64, ptr [[TMP22]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr inbounds i32, ptr [[TMP23]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr inbounds i32, ptr [[TMP24]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds i32, ptr [[TMP25]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I2314]], ptr [[TMP26]], align 4, !invariant.group [[META25:![0-9]+]]
; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr inbounds i32, ptr [[TMP27]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr inbounds i64, ptr [[TMP28]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr inbounds i32, ptr [[TMP29]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr inbounds i32, ptr [[TMP30]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr inbounds i32, ptr [[TMP31]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP33:%.*]] = getelementptr inbounds i32, ptr [[TMP32]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I2517]], ptr [[TMP33]], align 4, !invariant.group [[META26:![0-9]+]]
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
; CHECK:       bb41:
; CHECK-NEXT:    tail call void @llvm.nvvm.barrier0() #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    [[I42]] = add nsw i32 [[I13]], [[I719]]
; CHECK-NEXT:    [[I43:%.*]] = add nsw i32 [[I12]], [[I719]]
; CHECK-NEXT:    [[I44]] = tail call i32 @llvm.smin.i32(i32 [[I43]], i32 1023)
; CHECK-NEXT:    [[I45:%.*]] = icmp slt i32 [[I42]], 1024
; CHECK-NEXT:    br i1 [[I45]], label [[BB11]], label [[BB46]]
; CHECK:       bb46:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define weak_odr protected void @__omp_offloading_daxpy_contd_0(
; CHECK-SAME: ptr noalias noundef [[ARG:%.*]], ptr noundef [[ARG1:%.*]], i64 noundef [[ARG2:%.*]], ptr noundef [[ARG3:%.*]]) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:  ContDispatchBB:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[GTID:%.*]] = add i32 [[TMP0]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0:%.*]], ptr [[ARG]], i32 0, i32 3
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
; CHECK-NEXT:    [[CONTCOUNT_IN_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP5]], i32 1
; CHECK-NEXT:    [[CONTCOUNT_IN:%.*]] = load i32, ptr [[CONTCOUNT_IN_PTR]], align 4
; CHECK-NEXT:    [[MASKTHREAD:%.*]] = icmp ult i32 [[GTID]], [[CONTCOUNT_IN]]
; CHECK-NEXT:    br i1 [[MASKTHREAD]], label [[CACHEREMAT0:%.*]], label [[THREADEXIT:%.*]]
; CHECK:       bb28:
; CHECK-NEXT:    [[I29:%.*]] = bitcast i64 [[ARG2]] to double
; CHECK-NEXT:    br label [[CACHESTORE0:%.*]]
; CHECK:       CacheStore0:
; CHECK-NEXT:    [[I2516:%.*]] = phi i32 [ [[I2515:%.*]], [[BB28:%.*]] ], [ [[I25_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I2313:%.*]] = phi i32 [ [[I2312:%.*]], [[BB28]] ], [ [[I23_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I1211:%.*]] = phi i32 [ [[I44_BB11:%.*]], [[BB28]] ], [ [[I12_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I139:%.*]] = phi i32 [ [[I42_BB11:%.*]], [[BB28]] ], [ [[I13_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I46:%.*]] = phi i32 [ [[I41:%.*]], [[BB28]] ], [ [[I4_CACHE:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I31:%.*]] = phi i64 [ [[I26:%.*]], [[BB28]] ], [ [[I39:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[I32:%.*]] = phi i32 [ [[I24:%.*]], [[BB28]] ], [ [[I38:%.*]], [[CACHEREMAT0]] ]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 3
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
; CHECK-NEXT:    [[CONTCOUNT_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP7]], i32 0
; CHECK-NEXT:    [[CACHEIDX:%.*]] = atomicrmw add ptr [[CONTCOUNT_PTR]], i32 1 monotonic, align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 5
; CHECK-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds ptr, ptr [[TMP9]], i32 0
; CHECK-NEXT:    [[CACHE_OUT_PTR:%.*]] = load ptr, ptr [[TMP10]], align 8
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 4
; CHECK-NEXT:    [[CACHE_OUT_OFFSET:%.*]] = load i32, ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I46]], ptr [[TMP12]], align 4, !invariant.group [[META20]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i32, ptr [[TMP13]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I32]], ptr [[TMP14]], align 4, !invariant.group [[META21]]
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i64, ptr [[TMP16]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i64 [[I31]], ptr [[TMP17]], align 8, !invariant.group [[META22]]
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr inbounds i32, ptr [[TMP18]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds i64, ptr [[TMP19]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i32, ptr [[TMP20]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I139]], ptr [[TMP21]], align 4, !invariant.group [[META23]]
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i32, ptr [[TMP22]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr inbounds i64, ptr [[TMP23]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr inbounds i32, ptr [[TMP24]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds i32, ptr [[TMP25]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I1211]], ptr [[TMP26]], align 4, !invariant.group [[META24]]
; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr inbounds i32, ptr [[TMP27]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr inbounds i64, ptr [[TMP28]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr inbounds i32, ptr [[TMP29]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr inbounds i32, ptr [[TMP30]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr inbounds i32, ptr [[TMP31]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I2313]], ptr [[TMP32]], align 4, !invariant.group [[META25]]
; CHECK-NEXT:    [[TMP33:%.*]] = getelementptr inbounds i32, ptr [[CACHE_OUT_PTR]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i32, ptr [[TMP33]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr inbounds i64, ptr [[TMP34]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr inbounds i32, ptr [[TMP35]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr inbounds i32, ptr [[TMP36]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP38:%.*]] = getelementptr inbounds i32, ptr [[TMP37]], i32 [[CACHE_OUT_OFFSET]]
; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr inbounds i32, ptr [[TMP38]], i32 [[CACHEIDX]]
; CHECK-NEXT:    store i32 [[I2516]], ptr [[TMP39]], align 4, !invariant.group [[META26]]
; CHECK-NEXT:    br label [[THREADEXIT]]
; CHECK:       CacheRemat0:
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 5
; CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[TMP40]], align 8
; CHECK-NEXT:    [[TMP42:%.*]] = getelementptr inbounds ptr, ptr [[TMP41]], i32 1
; CHECK-NEXT:    [[CACHE_IN_PTR:%.*]] = load ptr, ptr [[TMP42]], align 8
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT_KERNELLAUNCHENVIRONMENTTY_0]], ptr [[ARG]], i32 0, i32 4
; CHECK-NEXT:    [[CACHE_IN_OFFSET:%.*]] = load i32, ptr [[TMP43]], align 4
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr inbounds i32, ptr [[CACHE_IN_PTR]], i32 [[GTID]]
; CHECK-NEXT:    [[I4_CACHE]] = load i32, ptr [[TMP44]], align 4, !invariant.group [[META20]]
; CHECK-NEXT:    [[TMP45:%.*]] = getelementptr inbounds i32, ptr [[CACHE_IN_PTR]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr inbounds i32, ptr [[TMP45]], i32 [[GTID]]
; CHECK-NEXT:    [[I32_CACHE:%.*]] = load i32, ptr [[TMP46]], align 4, !invariant.group [[META21]]
; CHECK-NEXT:    [[TMP47:%.*]] = getelementptr inbounds i32, ptr [[CACHE_IN_PTR]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP48:%.*]] = getelementptr inbounds i32, ptr [[TMP47]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP49:%.*]] = getelementptr inbounds i64, ptr [[TMP48]], i32 [[GTID]]
; CHECK-NEXT:    [[I31_CACHE:%.*]] = load i64, ptr [[TMP49]], align 8, !invariant.group [[META22]]
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i32, ptr [[CACHE_IN_PTR]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr inbounds i32, ptr [[TMP50]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP52:%.*]] = getelementptr inbounds i64, ptr [[TMP51]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP53:%.*]] = getelementptr inbounds i32, ptr [[TMP52]], i32 [[GTID]]
; CHECK-NEXT:    [[I13_CACHE]] = load i32, ptr [[TMP53]], align 4, !invariant.group [[META23]]
; CHECK-NEXT:    [[TMP54:%.*]] = getelementptr inbounds i32, ptr [[CACHE_IN_PTR]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP55:%.*]] = getelementptr inbounds i32, ptr [[TMP54]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP56:%.*]] = getelementptr inbounds i64, ptr [[TMP55]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP57:%.*]] = getelementptr inbounds i32, ptr [[TMP56]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP58:%.*]] = getelementptr inbounds i32, ptr [[TMP57]], i32 [[GTID]]
; CHECK-NEXT:    [[I12_CACHE]] = load i32, ptr [[TMP58]], align 4, !invariant.group [[META24]]
; CHECK-NEXT:    [[TMP59:%.*]] = getelementptr inbounds i32, ptr [[CACHE_IN_PTR]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP60:%.*]] = getelementptr inbounds i32, ptr [[TMP59]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP61:%.*]] = getelementptr inbounds i64, ptr [[TMP60]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP62:%.*]] = getelementptr inbounds i32, ptr [[TMP61]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP63:%.*]] = getelementptr inbounds i32, ptr [[TMP62]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP64:%.*]] = getelementptr inbounds i32, ptr [[TMP63]], i32 [[GTID]]
; CHECK-NEXT:    [[I23_CACHE]] = load i32, ptr [[TMP64]], align 4, !invariant.group [[META25]]
; CHECK-NEXT:    [[TMP65:%.*]] = getelementptr inbounds i32, ptr [[CACHE_IN_PTR]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP66:%.*]] = getelementptr inbounds i32, ptr [[TMP65]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP67:%.*]] = getelementptr inbounds i64, ptr [[TMP66]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP68:%.*]] = getelementptr inbounds i32, ptr [[TMP67]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP69:%.*]] = getelementptr inbounds i32, ptr [[TMP68]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP70:%.*]] = getelementptr inbounds i32, ptr [[TMP69]], i32 [[CACHE_IN_OFFSET]]
; CHECK-NEXT:    [[TMP71:%.*]] = getelementptr inbounds i32, ptr [[TMP70]], i32 [[GTID]]
; CHECK-NEXT:    [[I25_CACHE]] = load i32, ptr [[TMP71]], align 4, !invariant.group [[META26]]
; CHECK-NEXT:    [[I7_RECOMPUTE:%.*]] = shl nsw i32 [[I4_CACHE]], 10
; CHECK-NEXT:    [[I15_RECOMPUTE:%.*]] = zext i32 [[I12_CACHE]] to i64
; CHECK-NEXT:    [[I17_RECOMPUTE:%.*]] = inttoptr i64 [[I15_RECOMPUTE]] to ptr
; CHECK-NEXT:    [[I21_RECOMPUTE:%.*]] = ptrtoint ptr [[I17_RECOMPUTE]] to i64
; CHECK-NEXT:    [[I29_RECOMPUTE:%.*]] = bitcast i64 [[ARG2]] to double
; CHECK-NEXT:    [[I33:%.*]] = getelementptr inbounds double, ptr [[ARG3]], i64 [[I31_CACHE]]
; CHECK-NEXT:    [[I34:%.*]] = load double, ptr [[I33]], align 8, !tbaa [[TBAA27:![0-9]+]]
; CHECK-NEXT:    [[I35:%.*]] = getelementptr inbounds double, ptr [[ARG1]], i64 [[I31_CACHE]]
; CHECK-NEXT:    [[I36:%.*]] = load double, ptr [[I35]], align 8, !tbaa [[TBAA27]]
; CHECK-NEXT:    [[I37:%.*]] = tail call double @llvm.fmuladd.f64(double [[I29_RECOMPUTE]], double [[I34]], double [[I36]])
; CHECK-NEXT:    store double [[I37]], ptr [[I35]], align 8, !tbaa [[TBAA27]]
; CHECK-NEXT:    [[I38]] = add nsw i32 [[I25_CACHE]], [[I32_CACHE]]
; CHECK-NEXT:    [[I39]] = sext i32 [[I38]] to i64
; CHECK-NEXT:    [[I40:%.*]] = icmp ugt i64 [[I39]], [[I21_RECOMPUTE]]
; CHECK-NEXT:    br i1 [[I40]], label [[BB41:%.*]], label [[CACHESTORE0]]
; CHECK:       bb41:
; CHECK-NEXT:    [[I718:%.*]] = phi i32 [ [[I7_RECOMPUTE]], [[CACHEREMAT0]] ], [ [[I718]], [[BB11_FROM_BB41:%.*]] ]
; CHECK-NEXT:    [[I2515]] = phi i32 [ [[I25_CACHE]], [[CACHEREMAT0]] ], [ [[I2515]], [[BB11_FROM_BB41]] ]
; CHECK-NEXT:    [[I2312]] = phi i32 [ [[I23_CACHE]], [[CACHEREMAT0]] ], [ [[I2312]], [[BB11_FROM_BB41]] ]
; CHECK-NEXT:    [[I1210:%.*]] = phi i32 [ [[I12_CACHE]], [[CACHEREMAT0]] ], [ [[I44_BB11]], [[BB11_FROM_BB41]] ]
; CHECK-NEXT:    [[I138:%.*]] = phi i32 [ [[I13_CACHE]], [[CACHEREMAT0]] ], [ [[I42_BB11]], [[BB11_FROM_BB41]] ]
; CHECK-NEXT:    [[I41]] = phi i32 [ [[I4_CACHE]], [[CACHEREMAT0]] ], [ [[I41]], [[BB11_FROM_BB41]] ]
; CHECK-NEXT:    tail call void @llvm.nvvm.barrier0() #[[ATTR6]]
; CHECK-NEXT:    [[I42:%.*]] = add nsw i32 [[I138]], [[I718]]
; CHECK-NEXT:    [[I43:%.*]] = add nsw i32 [[I1210]], [[I718]]
; CHECK-NEXT:    [[I44:%.*]] = tail call i32 @llvm.smin.i32(i32 [[I43]], i32 1023)
; CHECK-NEXT:    [[I45:%.*]] = icmp slt i32 [[I42]], 1024
; CHECK-NEXT:    br i1 [[I45]], label [[BB11_FROM_BB41]], label [[BB46:%.*]]
; CHECK:       bb11.from.bb41:
; CHECK-NEXT:    [[I42_BB11]] = phi i32 [ [[I42]], [[BB41]] ]
; CHECK-NEXT:    [[I44_BB11]] = phi i32 [ [[I44]], [[BB41]] ]
; CHECK-NEXT:    [[I14:%.*]] = zext i32 [[I42_BB11]] to i64
; CHECK-NEXT:    [[I15:%.*]] = zext i32 [[I44_BB11]] to i64
; CHECK-NEXT:    [[I16:%.*]] = inttoptr i64 [[I14]] to ptr
; CHECK-NEXT:    [[I17:%.*]] = inttoptr i64 [[I15]] to ptr
; CHECK-NEXT:    [[I20:%.*]] = ptrtoint ptr [[I16]] to i64
; CHECK-NEXT:    [[I21:%.*]] = ptrtoint ptr [[I17]] to i64
; CHECK-NEXT:    [[I22:%.*]] = trunc i64 [[I20]] to i32
; CHECK-NEXT:    [[I24]] = add nsw i32 [[I2312]], [[I22]]
; CHECK-NEXT:    [[I26]] = sext i32 [[I24]] to i64
; CHECK-NEXT:    [[I27:%.*]] = icmp ugt i64 [[I26]], [[I21]]
; CHECK-NEXT:    br i1 [[I27]], label [[BB41]], label [[BB28]]
; CHECK:       bb46:
; CHECK-NEXT:    ret void
; CHECK:       ThreadExit:
; CHECK-NEXT:    call void asm sideeffect "exit
; CHECK-NEXT:    unreachable
;
;.
; CHECK: [[RNG17]] = !{i32 1, i32 0}
; CHECK: [[RNG18]] = !{i32 0, i32 -1}
; CHECK: [[RNG19]] = !{i32 -2147483648, i32 1024}
; CHECK: [[META20]] = distinct !{}
; CHECK: [[META21]] = distinct !{}
; CHECK: [[META22]] = distinct !{}
; CHECK: [[META23]] = distinct !{}
; CHECK: [[META24]] = distinct !{}
; CHECK: [[META25]] = distinct !{}
; CHECK: [[META26]] = distinct !{}
; CHECK: [[TBAA27]] = !{[[META28:![0-9]+]], [[META28]], i64 0}
; CHECK: [[META28]] = !{!"double", [[META29:![0-9]+]], i64 0}
; CHECK: [[META29]] = !{!"omnipotent char", [[META30:![0-9]+]], i64 0}
; CHECK: [[META30]] = !{!"Simple C/C++ TBAA"}
;.
